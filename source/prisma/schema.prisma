// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Shop {
  id             Int              @id @default(autoincrement())
  domain         String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  syncOrdersTask SyncOrdersTask[]
}

model SyncOrdersTask {
  id         Int                 @id @default(autoincrement())
  shopId     Int
  stage      SyncOrdersTaskStage
  inProgress Boolean             @default(false)

  data Json @default("{}")

  retryCount Int     @default(0)
  error      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shop      Shop     @relation(fields: [shopId], references: [id])

  @@index([shopId], name: "SyncOrdersTaskShopIdIndex")
  @@index([stage], name: "SyncOrdersTaskStageIndex")
  @@index([inProgress, updatedAt], name: "SyncOrdersTaskInProgressUpdatedAtIndex")
}


model Order {
  id               Int       @id @default(autoincrement())
  shopifyId        String?    @unique
  totalCost        Decimal
  currency         String
  customer         Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId       Int
  refunds          Refund[]
  returns          Return[]

  @@index([shopifyId], name: "OrderShopIdIndex")
}

model Customer {
  id               Int       @id @default(autoincrement())
  shopifyId        String    @unique
  firstName        String
  lastName         String
  email            String
  orders           Order[]

  @@index([shopifyId], name: "CustomerShopIdIndex")
  @@index([email], name: "CustomerEmailIndex")
}

model Refund {
  id               Int      @id @default(autoincrement())
  shopifyId        String    @unique
  orderId          Int
  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  totalRefunded    Decimal
  refundCurrency   String

  @@index([shopifyId], name: "RefundShopIdIndex")
}

model Return {
  id               Int      @id @default(autoincrement())
  shopifyId        String    @unique
  orderId          Int
  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([shopifyId], name: "ReturnShopIdIndex")
}


enum SyncOrdersTaskStage {
  CREATE_BULK_TASK
  WAIT_FOR_FINISH
  DOWNLOAD_RESULT
  PROCESS_RESULT
  FINISH
}

